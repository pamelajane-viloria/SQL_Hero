{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pamel\\\\OneDrive\\\\Pictures\\\\Bootcamp\\\\Village88 Bootcamp\\\\Capstone\\\\SQLHero\\\\frontend\\\\src\\\\components\\\\auth\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PrivateRoute({\n  children\n}) {\n  _s();\n  const location = useLocation();\n  const isLoggedIn = localStorage.getItem('authToken');\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true,\n      state: {\n        from: location\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 16\n    }, this);\n  }\n  return children;\n}\n_s(PrivateRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\n\n// import { Navigate, useLocation } from 'react-router-dom';\n// import jwt_decode from 'jwt-decode'; // Library to decode JWT\n\n// function PrivateRoute({ children }) {\n//   const location = useLocation();\n//   const authToken = localStorage.getItem('authToken');\n\n//   // Check for token and its validity (optional)\n//   if (!authToken) {\n//     return <Navigate to=\"/login\" replace state={{ from: location }} />;\n//   }\n\n//   try {\n//     const decoded = jwt_decode(authToken);\n//     const currentTime = Date.now() / 1000; // Convert milliseconds to seconds\n\n//     if (decoded.exp < currentTime) {\n//       // Token expired, handle re-authentication\n//       console.warn('Token expired!');\n//       localStorage.removeItem('authToken'); // Remove expired token\n//       return <Navigate to=\"/login\" replace state={{ from: location }} />;\n//     }\n\n//     // Valid token, allow access\n//     return children;\n//   } catch (err) {\n//     console.error('Invalid token:', err);\n//     localStorage.removeItem('authToken'); // Remove invalid token\n//     return <Navigate to=\"/login\" replace state={{ from: location }} />;\n//   }\n// }\n\n// export default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","jsxDEV","_jsxDEV","PrivateRoute","children","_s","location","isLoggedIn","localStorage","getItem","to","replace","state","from","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/pamel/OneDrive/Pictures/Bootcamp/Village88 Bootcamp/Capstone/SQLHero/frontend/src/components/auth/PrivateRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n\r\nfunction PrivateRoute({ children }) {\r\n    const location = useLocation();\r\n    const isLoggedIn = localStorage.getItem('authToken');\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to=\"/login\" replace state={{ from: location }} />;\r\n    }\r\n\r\n    return children;\r\n}\r\n\r\nexport default PrivateRoute;\r\n\r\n// import { Navigate, useLocation } from 'react-router-dom';\r\n// import jwt_decode from 'jwt-decode'; // Library to decode JWT\r\n\r\n// function PrivateRoute({ children }) {\r\n//   const location = useLocation();\r\n//   const authToken = localStorage.getItem('authToken');\r\n\r\n//   // Check for token and its validity (optional)\r\n//   if (!authToken) {\r\n//     return <Navigate to=\"/login\" replace state={{ from: location }} />;\r\n//   }\r\n\r\n//   try {\r\n//     const decoded = jwt_decode(authToken);\r\n//     const currentTime = Date.now() / 1000; // Convert milliseconds to seconds\r\n\r\n//     if (decoded.exp < currentTime) {\r\n//       // Token expired, handle re-authentication\r\n//       console.warn('Token expired!');\r\n//       localStorage.removeItem('authToken'); // Remove expired token\r\n//       return <Navigate to=\"/login\" replace state={{ from: location }} />;\r\n//     }\r\n\r\n//     // Valid token, allow access\r\n//     return children;\r\n//   } catch (err) {\r\n//     console.error('Invalid token:', err);\r\n//     localStorage.removeItem('authToken'); // Remove invalid token\r\n//     return <Navigate to=\"/login\" replace state={{ from: location }} />;\r\n//   }\r\n// }\r\n\r\n// export default PrivateRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,SAASC,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAEpD,IAAI,CAACF,UAAU,EAAE;IACb,oBAAOL,OAAA,CAACH,QAAQ;MAACW,EAAE,EAAC,QAAQ;MAACC,OAAO;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEP;MAAS;IAAE;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtE;EAEA,OAAOb,QAAQ;AACnB;AAACC,EAAA,CATQF,YAAY;EAAA,QACAH,WAAW;AAAA;AAAAkB,EAAA,GADvBf,YAAY;AAWrB,eAAeA,YAAY;;AAE3B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}