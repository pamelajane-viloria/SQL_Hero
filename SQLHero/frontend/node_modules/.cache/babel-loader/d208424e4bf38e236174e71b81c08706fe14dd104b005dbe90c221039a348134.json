{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pamel\\\\OneDrive\\\\Pictures\\\\Bootcamp\\\\Village88 Bootcamp\\\\Capstone\\\\SQLHero\\\\frontend\\\\src\\\\components\\\\auth\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\nimport { Navigate, useLocation } from 'react-router-dom';\nimport jwtDecode from 'jsonwebtoken'; // Install `jsonwebtoken` library\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PrivateRoute({\n  children\n}) {\n  _s();\n  const location = useLocation();\n  const authToken = localStorage.getItem('authToken');\n  const isLoggedIn = authToken && !isTokenExpired(authToken); // Check token existence and expiry\n\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true,\n      state: {\n        from: location\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 16\n    }, this);\n  }\n  return children;\n}\n_s(PrivateRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = PrivateRoute;\nfunction isTokenExpired(token) {\n  try {\n    const decoded = jwtDecode(token);\n    const currentTime = Date.now() / 1000; // Convert current time to seconds\n    return decoded.exp < currentTime;\n  } catch (err) {\n    console.error('Error decoding token:', err);\n    return false; // Assume invalid token on error\n  }\n}\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Navigate","useLocation","jwtDecode","jsxDEV","_jsxDEV","PrivateRoute","children","_s","location","authToken","localStorage","getItem","isLoggedIn","isTokenExpired","to","replace","state","from","fileName","_jsxFileName","lineNumber","columnNumber","_c","token","decoded","currentTime","Date","now","exp","err","console","error","$RefreshReg$"],"sources":["C:/Users/pamel/OneDrive/Pictures/Bootcamp/Village88 Bootcamp/Capstone/SQLHero/frontend/src/components/auth/PrivateRoute.js"],"sourcesContent":["import { Navigate, useLocation } from 'react-router-dom';\r\nimport jwtDecode from 'jsonwebtoken'; // Install `jsonwebtoken` library\r\n\r\nfunction PrivateRoute({ children }) {\r\n    const location = useLocation();\r\n    const authToken = localStorage.getItem('authToken');\r\n\r\n    const isLoggedIn = authToken && !isTokenExpired(authToken); // Check token existence and expiry\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to=\"/login\" replace state={{ from: location }} />;\r\n    }\r\n\r\n    return children;\r\n    }\r\n\r\n    function isTokenExpired(token) {\r\n    try {\r\n        const decoded = jwtDecode(token);\r\n        const currentTime = Date.now() / 1000; // Convert current time to seconds\r\n        return decoded.exp < currentTime;\r\n    } catch (err) {\r\n        console.error('Error decoding token:', err);\r\n        return false; // Assume invalid token on error\r\n    }\r\n}\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,OAAOC,SAAS,MAAM,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAEnD,MAAMC,UAAU,GAAGH,SAAS,IAAI,CAACI,cAAc,CAACJ,SAAS,CAAC,CAAC,CAAC;;EAE5D,IAAI,CAACG,UAAU,EAAE;IACb,oBAAOR,OAAA,CAACJ,QAAQ;MAACc,EAAE,EAAC,QAAQ;MAACC,OAAO;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAET;MAAS;IAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtE;EAEA,OAAOf,QAAQ;AACf;AAACC,EAAA,CAXIF,YAAY;EAAA,QACAJ,WAAW;AAAA;AAAAqB,EAAA,GADvBjB,YAAY;AAajB,SAASQ,cAAcA,CAACU,KAAK,EAAE;EAC/B,IAAI;IACA,MAAMC,OAAO,GAAGtB,SAAS,CAACqB,KAAK,CAAC;IAChC,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACvC,OAAOH,OAAO,CAACI,GAAG,GAAGH,WAAW;EACpC,CAAC,CAAC,OAAOI,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;IAC3C,OAAO,KAAK,CAAC,CAAC;EAClB;AACJ;AAEA,eAAexB,YAAY;AAAC,IAAAiB,EAAA;AAAAU,YAAA,CAAAV,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}